[
    {
      "id": 2,
      "question": "What is the purpose of the useMemo hook in React?",
      "code": "",
      "answers": [
        "To memoize the result of a function and recompute it only when its dependencies change",
        "To manage component state",
        "To perform side effects in function components",
        "To create a reference to a DOM element"
      ],
      "correctAnswer": 0
    },
    {
      "id": 3,
      "question": "What does the useState hook do in React?",
      "code": "const [state, setState] = useState(0);",
      "answers": [
        "It allows creating state in a functional component",
        "It updates the global state of the application",
        "It creates a mutable reference",
        "It is a function to render components"
      ],
      "correctAnswer": 0
    },
    {  
      "id": 4,  
      "question": "What is JSX in React?",  
      "code": "",  
      "answers": [  
        "A JavaScript function for rendering components",  
        "A syntax extension for JavaScript that allows writing HTML-like code within JavaScript",  
        "A React API for managing component state",  
        "A library that enables dynamic styling in React applications"  
      ],  
      "correctAnswer": 1  
    },      
    {
      "id": 5,
      "question": "How do you define a functional component in React?",
      "code": "function MyComponent() { return <h1>Hello!</h1>; }",
      "answers": [
        "Using a class that extends React.Component",
        "Using a function that returns JSX",
        "Using the useState hook",
        "None of the above"
      ],
      "correctAnswer": 1
    },
    {
      "id": 6,
      "question": "What is a 'prop' in React?",
      "code": "function Welcome(props) { return <h1>Hello, {props.name}</h1>; }",
      "answers": [
        "An internal variable of the component",
        "A configuration parameter for a component",
        "A global state",
        "A function to change the state"
      ],
      "correctAnswer": 1
    },
    {
      "id": 7,
      "question": "What is a custom hook in React and why would you use one?",
      "code": "",
      "answers": [
        "A custom hook is a function that allows you to reuse stateful logic across multiple components, and you would use one to avoid code duplication",
        "A custom hook is a special type of component that can only be used in class components, and you would use one to manage complex state",
        "A custom hook is a built-in React hook that provides additional functionality, and you would use one to enhance component performance",
        "A custom hook is a function that allows you to create context, and you would use one to manage global state"
      ],
      "correctAnswer": 0
    },
    {
      "id": 8,
      "question": "How do you update the state in a class component in React?",
      "code": "this.setState({ counter: this.state.counter + 1 });",
      "answers": [
        "Using useState()",
        "Using this.setState()",
        "Modifying the state directly",
        "Using useEffect()"
      ],
      "correctAnswer": 1
    },
    {
      "id": 9,
      "question": "What does the spread operator '...' do in React?",
      "code": "const obj = { ...props };",
      "answers": [
        "It creates a shallow copy of an object or array",
        "It binds functions",
        "It spreads the global state across all components",
        "It concatenates two arrays"
      ],
      "correctAnswer": 0
    },
    {  
      "id": 10,  
      "question": "What is the significance of the `key` prop in React lists?",  
      "code": "",  
      "answers": [  
        "It allows React to identify elements that have been changed, added, or removed",  
        "It is used to optimize performance by memoizing list elements",  
        "It is a unique identifier required for styling elements",  
        "It prevents React from re-rendering the entire list"  
      ],  
      "correctAnswer": 0  
    },  
    {
      "id": 11,
      "question": "How are events handled in React?",
      "code": "<button onClick={this.handleClick}>Click me</button>",
      "answers": [
        "Using native JavaScript event handlers",
        "Assigned as functions within the components",
        "They must be bound using .bind() in class methods",
        "All of the above"
      ],
      "correctAnswer": 3
    },
    {
      "id": 12,
      "question": "What is React Router?",
      "code": "import { BrowserRouter as Router, Route } from 'react-router-dom';",
      "answers": [
        "A library to manage application state",
        "A tool to make HTTP requests",
        "A library to handle routing and navigation in a SPA",
        "An extension to optimize performance"
      ],
      "correctAnswer": 2
    },
    {
      "id": 13,
      "question": "How do you pass a function as a prop in React?",
      "code": "",
      "answers": [
        "Using the useEffect hook",
        "Directly placing the function inside the component",
        "Passing the function as a property value",
        "Using React context"
      ],
      "correctAnswer": 2
    },
    {
      "id": 14,
      "question": "What is the React syntax to lazy load a component?",
      "code": "",
      "answers": [
        "React.lazy(import('./some-component'))",
        "React.load(import('./some-component,))",
        "React.load(() => import('./some-component'))",
        "React.lazy(() => import('./some-component'))"
      ],
      "correctAnswer": 3
    },
    {
      "id": 15,
      "question": "How do you call a function that returns another function?",
      "code": "",
      "answers": [
        "functionName(())",
        "functionName(() => ())",
        "functionName()()",
        "functionName().()"
      ],
      "correctAnswer": 2
    },
    {
      "id": 16,
      "question": "What is shallow rendering?",
      "code": "",
      "answers": [
        "Rendering the component without needing to pass any props or setting any state",
        "Rendering the component without enforcing the prop types",
        "Rendering the component with a shallow context object",
        "Rendering just the component and not its children"
      ],
      "correctAnswer": 3
    },
      {
      "id": 17,
      "question": "What is shallow rendering in React and what is it used for?",
      "code": "",
      "answers": [
        "Rendering the component without needing to pass any props or setting any state, used for testing component isolation",
        "Rendering the component without enforcing the prop types, used for performance optimization",
        "Rendering the component with a shallow context object, used for context testing",
        "Rendering just the component and not its children, used for unit testing to ensure the component's behavior in isolation"
      ],
      "correctAnswer": 3
    },
    {
      "id": 18,
      "question": "What React prop specifies the target element for a label?",
      "code": "",
      "answers": [
        "target",
        "htmlFor",
        "inputTarget",
        "for",
        "labelTarget"
      ],
      "correctAnswer": 1
    },
    {
      "id": 19,
      "question": "How can you write uncontrolled components?",
      "code": "",
      "answers": [
        "By using the event handler",
        "By using useState and useEffect",
        "By using ref",
        "By using synthetic events"
      ],
      "correctAnswer": 2
    },
    {
      "id": 20,
      "question": "What is Zustand used for in a React application?",
      "code": "",
      "answers": [
        "To manage global state in a React application",
        "To handle routing and navigation",
        "To perform side effects like data fetching",
        "To create styled components"
      ],
      "correctAnswer": 0
    },
    {
      "id": 21,
      "question": "How do you create a store in Zustand?",
      "code": "",
      "answers": [
        "Using the createStore function",
        "Using the create function",
        "Using the useStore hook",
        "Using the createZustandStore function"
      ],
      "correctAnswer": 1
    },
    {
      "id": 22,
      "question": "How do you use the .refine method in zod to add custom validation?",
      "code": "",
      "answers": [
        "z.string().refine(value => value.length > 5, { message: 'Must be longer than 5 characters' })",
        "z.string().validate(value => value.length > 5, { message: 'Must be longer than 5 characters' })",
        "z.string().custom(value => value.length > 5, { message: 'Must be longer than 5 characters' })",
        "z.string().check(value => value.length > 5, { message: 'Must be longer than 5 characters' })"
      ],
      "correctAnswer": 0
    },
    {
      "id": 23,
      "question": "How do you use a resolver in react-hook-form to integrate with a validation library?",
      "code": "",
      "answers": [
        "By passing the resolver function to the register function",
        "By passing the resolver function to the handleSubmit function",
        "By passing the resolver function to the useFieldArray hook",
        "By passing the resolver function to the useForm hook"
      ],
      "correctAnswer": 3
    },
    {
      "id": 24,
      "question": "What is the purpose of the useForm hook in react-hook-form?",
      "code": "",
      "answers": [
        "To register input fields and track their values",
        "To handle form submission and manage the form's state during the submission process",
        "To create a form context and manage the state of the form, including input values, validation, and submission handling",
        "To validate form fields and provide error messages"
      ],
      "correctAnswer": 2
    },
    {
      "id": 25,
      "question": "What parameters does the .refine method in zod accept?",
      "code": "",
      "answers": [
        "A validation function and an error message object",
        "A validation function and a success message object",
        "A validation function and a configuration object",
        "A validation function and a callback function"
      ],
      "correctAnswer": 0
    },
    {
      "id": 26,
      "question": "What is the main difference between controlled and uncontrolled components in React?",
      "code": "",
      "answers": [
        "Controlled components rely on React state to manage their value, while uncontrolled components rely on the DOM.",
        "Controlled components use refs to access their value, while uncontrolled components use state.",
        "Controlled components cannot be used with forms, while uncontrolled components can.",
        "Controlled components are more performant than uncontrolled components."
      ],
      "correctAnswer": 0
    },
    {
      "id": 27,
      "question": "How do you use React.lazy to load a component lazily?",
      "code": "",
      "answers": [
        "const MyComponent = React.lazy(() => require('./MyComponent'))",
        "const MyComponent = React.lazy(() => load('./MyComponent'))",
        "const MyComponent = React.lazy(() => import('./MyComponent'))",
        "const MyComponent = React.lazy(() => fetch('./MyComponent'))"
      ],
      "correctAnswer": 2
    },
    {
      "id": 28,
      "question": "What is the Suspense component used for in React?",
      "code": "",
      "answers": [
        "To manage global state",
        "To display a fallback UI while a lazy-loaded component is being loaded",
        "To handle routing and navigation",
        "To perform side effects like data fetching"
      ],
      "correctAnswer": 1
    },
    {
      "id": 29,
      "question": "What is the purpose of React.StrictMode?",
      "code": "",
      "answers": [
        "To optimize production builds by removing unused code and ensuring that the final bundle is as small as possible",
        "To identify potential issues in an application by enabling additional checks and warnings, including rendering components twice in development to help find unexpected side effects",
        "To enforce strict type checking during runtime to catch type errors and ensure type safety",
        "To improve the rendering performance of React components by optimizing the reconciliation process"
      ],
      "correctAnswer": 1
  },
  {
    "id": 30,
    "question": "When would you use the `useReducer` hook instead of `useState`?",
    "code": "",
    "answers": [
      "When you want to replace Redux with a simpler alternative for global state management",
      "When you need to perform asynchronous operations in your state logic, such as fetching data from an API",
      "When you need to manage complex state logic that involves multiple sub-values or when the next state depends on the previous state",
      "When you want to share state across multiple components without using context"
    ],
    "correctAnswer": 2
  },
  {  
    "id": 31,  
    "question": "What is the virtual DOM in React?",  
    "code": "",  
    "answers": [  
      "A direct representation of the UI in the browser",  
      "An in-memory representation of the real DOM used for efficient updates",  
      "A feature that makes React applications faster by skipping the browser's DOM",  
      "A library for optimizing React's performance"  
    ],  
    "correctAnswer": 1  
  }



  ]
  
